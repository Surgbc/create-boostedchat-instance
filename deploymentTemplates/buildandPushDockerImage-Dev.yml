name: Docker Build and Push for Dev

# We need to log the last time a successful build was performed so that we work only with repos that were updated after the logged time.

# on:
#   push:
#     branches:
#     - master
env:
  branch: dev
on:
  push:
    branches:
      - '*-dev'

jobs:
    stopParallelJobs:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
          with:
            ref: master
        - name: stopParallelJobs
          env:
            workflowName: ${{ github.workflow }}
            GH_PAT: ${{ secrets.REPO_ACCESS_TOKEN }}
          run: |
            /bin/bash localscripts/stopParallelRuns.sh ${{ github.repository }}

    setup: 
      needs: stopParallelJobs
      name: "Set up"
      # if: startsWith(github.event.head_commit.message, 'build and deploy')
      # if: ${{ startsWith(github.ref, 'refs/heads/') && github.ref_type == 'branch' && github.ref == 'refs/heads/*-dev' }}
      # if: startsWith(github.ref, 'refs/heads/') && endsWith(github.ref, '-dev')
      runs-on: ubuntu-latest
      outputs:
        matrix: ${{ steps.set-matrix.outputs.matrix }}
        hasMatrix: ${{ steps.set-matrix.outputs.hasMatrix }}
      steps:
        - uses: actions/checkout@v4
          with:
            ref: master
        - name: Yaml to Json
          env:
            PAT: ${{ secrets.REPO_ACCESS_TOKEN }}
          run: |
            ls -lha
            /bin/bash localscripts/matrix.sh  ${{ github.repository }}
        - name: Set matrix data
          id: set-matrix
          run: |
            cat ./config.json
            cat hasMatrix
            echo "matrix=$(jq -c . < ./config.json)" >> $GITHUB_OUTPUT
            echo "hasMatrix=$(cat hasMatrix)" >> $GITHUB_OUTPUT
            
    loop:
      runs-on: ubuntu-latest
      needs: 
        - setup
      if: needs.setup.outputs.hasMatrix == 'true'
      strategy:
        matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      steps:
        - uses: actions/checkout@v4
          with:
            ref: ${{ matrix.service }}-${{ matrix.branch }}
        - name: Set Docker secrets based on branch
          run: |
            echo ${{ needs.setup.outputs.branch }}
            echo "DOCKER_USERNAME=${{ secrets.DEV_DOCKER_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_PASSWORD=${{ secrets.DEV_DOCKER_PASSWORD }}" >> $GITHUB_ENV
        
        - name: Set Docker secrets based on branch
          # if: ${{ needs.setup.outputs.branch }} == 'main' && ${{steps.check_commit_message.outputs.skip_build}} != 'true'
          if: needs.setup.outputs.branch == 'main' && steps.check_commit_message.outputs.skip_build != 'true'
          run: |
            echo ${{ needs.setup.outputs.branch }}
            echo "DOCKER_USERNAME=${{ secrets.MAIN_DOCKER_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_PASSWORD=${{ secrets.MAIN_DOCKER_PASSWORD }}" >> $GITHUB_ENV
  
        - name: Login to Docker Hub
          if: steps.check_commit_message.outputs.skip_build != 'true'
          uses: docker/login-action@v2
          with:
            username: ${{ env.DOCKER_USERNAME }}
            password: ${{ env.DOCKER_PASSWORD }}
        - name: Build and push Docker image
          if: steps.check_commit_message.outputs.skip_build != 'true'
          run: |
            branch="${{ matrix.service }}-${{ matrix.branch }}"
            lastBuildTime=$(git log -1 --format=%at origin/time 2>/dev/null || echo 0)
            lastUpdateTime=$(git log -1 --format=%at origin/$branch 2>/dev/null || echo 0)
            pwd
            ls -lha
            docker build -t ${{ matrix.image }} .
            docker push ${{ matrix.image }}
        - name: Delete after Docker push
          run: |
            curl -L \
            -X DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.REPO_ACCESS_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/git/refs/heads/${{ matrix.service }}-${{ matrix.branch }}
        - run: |
            # rm -rf $(pwd)
            # git pull origin master
            branch=$(git branch)
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git config user.name "GitHub Actions"
            git add . && git commit -m "tmp"
            echo "branch=$branch"  >> $GITHUB_ENV
            git checkout origin/master
        # - uses: actions/checkout@v4
        - name: Login to Google Cloud
          id: auth
          uses: google-github-actions/auth@v1
          with:
            token_format: access_token
            workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_ID }}
            service_account: ${{ secrets.SERVICE_ACCOUNT }}
        - name: Set up Cloud SDK
          uses: google-github-actions/setup-gcloud@v0.3.0
        - name: List vms
          id: list_instances
          run: |
            gcloud compute instances list --format="value(name, zone)" > instances.txt
            cp instances.txt zones.txt
            sed -i 's/\s.*//' instances.txt # remove all but the first
            sed -i 's/.*\s\([^ ]*\)$/\1/' zones.txt # remove all but the last
            #   instances=$(cat instances.txt | base64 -w 0)
            # echo "instances=$instances" >> $GITHUB_OUTPUT
            instances=$(cat instances.txt)
            # it will be less resource intensive to run it from here
        - name: Loop and Update
          run: |
            cat instances.txt
            cat zones.txt
            echo "#!/bin/bash" > updateInstances.sh
            index=1
            echo "updating service: ${{ matrix.service }}"
            while IFS= read -r instance; do
              echo $instance
              zone=$(sed -n "${index}p" zones.txt)
              ((index++))
              echo "gcloud compute scp setupscripts/update-microservices.sh $instance:/tmp/update-microservices.sh --zone=$zone" >> updateInstances.sh
              #echo "gcloud compute ssh $instance --zone=$zone --command=\"sudo chmod +x /tmp/update-microservices.sh \""  >> updateInstances.sh
              echo "gcloud compute ssh $instance --zone=$zone --command=\"sudo chmod +x /tmp/update-microservices.sh && sudo bash /tmp/update-microservices.sh ${{ matrix.service }}\""  >> updateInstances.sh
            done < instances.txt
            cat updateInstances.sh
            bash updateInstances.sh
            sleep 30
            git checkout "${{ env.branch }}"

          