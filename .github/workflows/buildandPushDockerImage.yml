name: Docker Build and Push

# We need to log the last time a successful build was performed so that we work only with repos that were updated after the logged time.

on:
  push:
    branches:
    - master
jobs:
    setup:
      name: "Set up"
      if: startsWith(github.event.head_commit.message, 'build and deploy')
      runs-on: ubuntu-latest
      outputs:
        matrix: ${{ steps.set-matrix.outputs.matrix }}
        branch: ${{ steps.extract_branch_name.outputs.branch }}
      steps:
        - uses: actions/checkout@v3
        - name: Get branch name from commit message
          id: extract_branch_name
          run: |
            branch_message=$(echo "${{ github.event.head_commit.message }}" | grep -oP '(?<=build and deploy )\S+')
            echo "::set-output name=branch::$branch_message"
            echo "branch=$branch_message"  >> $GITHUB_ENV
            echo "found branch: $branch_message"
            echo "branch=$branch_message" >> $GITHUB_OUTPUT
        - name: Yaml to Json
          env:
            branch: ${{ steps.extract_branch_name.outputs.branch }}
          run: |
            /bin/bash matrix.sh
        - name: Set matrix data
          id: set-matrix
          run: |
            cat ./config.json
            echo "matrix=$(jq -c . < ./config.json)" >> $GITHUB_OUTPUT
            
    loop:
      runs-on: ubuntu-latest
      needs: 
        - setup
      strategy:
        matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      steps:
        - uses: actions/checkout@v3
          with:
            ref: ${{ matrix.service }}-${{ matrix.branch }}
        - name: Get last update and build times
          run: |
            # lastbuildtime=$(git log -1 --format=%at origin/time 2>/dev/null || echo 0)
            # lastupdatetime=$(git log -1 --format=%at origin/${{ matrix.service }}-${{ matrix.branch }} 2>/dev/null || echo 0) 
            # echo "Last build time: $lastbuildtime, Last update time: $lastupdatetime" # Add for debugging
    
            # # Skip the rest of the steps if lastbuildtime is greater
            # if [[ $lastbuildtime -gt $lastupdatetime ]]; then
            #   echo "Skipping build, time branch updated more recently" 
            #   exit 0  # Successfully exit to stop the current iteration
            # fi
            if git log -1 --pretty=%B origin/${{ matrix.service }}-${{ matrix.branch }} | grep -q "Bot: Update built time"; then
              echo "Skipping build, last commit message on branch was 'Bot: Update built time'"
              exit 0  # Successfully exit to stop the current iteration
            fi
        - name: Set Docker secrets based on branch
          if: ${{ needs.setup.outputs.branch }} == 'dev'
          run: |
            echo "DOCKER_USERNAME=${{ secrets.DEV_DOCKER_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_PASSWORD=${{ secrets.DEV_DOCKER_PASSWORD }}" >> $GITHUB_ENV
        
        - name: Set Docker secrets based on branch
          if: ${{ needs.setup.outputs.branch }} == 'main'
          run: |
            echo "DOCKER_USERNAME=${{ secrets.MAIN_DOCKER_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_PASSWORD=${{ secrets.MAIN_DOCKER_PASSWORD }}" >> $GITHUB_ENV
  
        - name: Login to Docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{ env.DOCKER_USERNAME }}
            password: ${{ env.DOCKER_PASSWORD }}
        - name: Build and push Docker image
          run: |
            branch="${{ matrix.service }}-${{ matrix.branch }}"
            lastBuildTime=$(git log -1 --format=%at origin/time 2>/dev/null || echo 0)
            lastUpdateTime=$(git log -1 --format=%at origin/$branch 2>/dev/null || echo 0)
            docker build -t ${{ matrix.image }} .
            docker push ${{ matrix.image }}
        - name: Update build time # this just ensures that the branch new time branch always has a change
          run: |
            echo "$(date)" > time.txt  
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git config user.name "GitHub Actions"
            git add time.txt
            git commit -m "Bot: Update built time"
        - uses: peaceiris/actions-gh-pages@v3
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_dir: ./  # Publish the root of your repo
            publish_branch: "${{ matrix.service }}-${{ matrix.branch }}"
            force_orphan: true # Overwrite the 'time' branch each time
    # write_timestamp:
    #   needs: [setup, loop] 
    #   runs-on: ubuntu-latest
    #   steps:
    #     - uses: actions/checkout@v3 
    #     - name: Write current time to time branch # this just ensures that the branch new time branch always has a change
    #       run: |
    #         echo "$(date)" > time.txt  
    #         git config user.email "github-actions[bot]@users.noreply.github.com"
    #         git config user.name "GitHub Actions"
    #         git add time.txt
    #         git commit -m "Update time"
    #     - uses: peaceiris/actions-gh-pages@v3
    #       with:
    #         github_token: ${{ secrets.GITHUB_TOKEN }}
    #         publish_dir: ./  # Publish the root of your repo
    #         publish_branch: time 
    #         force_orphan: true # Overwrite the 'time' branch each time
    updates:
      needs: 
        - loop
      runs-on: ubuntu-latest
      timeout-minutes: 90
      permissions:
        contents: 'read'
        id-token: 'write'
      steps:
        - name: Login to Google Cloud
          id: auth
          uses: google-github-actions/auth@v1
          with:
            token_format: access_token
            workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_ID }}
            service_account: ${{ secrets.SERVICE_ACCOUNT }}
        - name: Set up Cloud SDK
          uses: google-github-actions/setup-gcloud@v0.3.0
  
        - name: set credential_file
          run: gcloud auth login --cred-file=${{steps.auth.outputs.credentials_file_path}}
        
        # - name: List vms
        #   id: list-instances
        #   run: |
        #     gcloud compute instances list --format="value(name)" > instances.txt

        - name: SSH and Update File
          run: | # the while loop does not await
            # while read -r instance zone; do
            #   echo "Instance: $instance, Zone: $zone"
            #   sleep 10 # wait for first process to generate ssh key
            #   gcloud compute ssh $instance --zone=$zone --command "echo \$(date) | sudo tee /root/update" &
            # done <<< "$(gcloud compute instances list --format="value(name,zone)")"
            # wait 

            while read -r instance zone; do
              echo "Instance: $instance, Zone: $zone"
              echo "gcloud compute ssh $instance --zone=$zone --command \"echo \$(date) | sudo tee /root/update\" " >> tmp.sh
            done <<< "$(gcloud compute instances list --format="value(name,zone)")"

            /bin/bash tmp.sh
    
            
            
            

   
  