name: Docker Build and Push for Dev

# We need to log the last time a successful build was performed so that we work only with repos that were updated after the logged time.

# on:
#   push:
#     branches:
#     - master
env:
  branch: dev
on:
  push:
    branches:
      - '*-dev'

jobs:
    setup:
      name: "Set up"
      # if: startsWith(github.event.head_commit.message, 'build and deploy')
      # if: ${{ startsWith(github.ref, 'refs/heads/') && github.ref_type == 'branch' && github.ref == 'refs/heads/*-dev' }}
      # if: startsWith(github.ref, 'refs/heads/') && endsWith(github.ref, '-dev')
      runs-on: ubuntu-latest
      outputs:
        matrix: ${{ steps.set-matrix.outputs.matrix }}
      steps:
        - uses: actions/checkout@v4
          with:
            ref: master
        - name: Yaml to Json
          env:
            PAT: ${{ secrets.REPO_ACCESS_TOKEN }}
          run: |
            ls -lha
            /bin/bash localscripts/matrix.sh  ${{ github.repository }}
        - name: Set matrix data
          id: set-matrix
          run: |
            cat ./config.json
            echo "matrix=$(jq -c . < ./config.json)" >> $GITHUB_OUTPUT
            
    loop:
      runs-on: ubuntu-latest
      needs: 
        - setup
      strategy:
        matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      steps:
        // check first if the branch exists
        - uses: actions/checkout@v4
          with:
            ref: ${{ matrix.service }}-${{ matrix.branch }}
        - name: Set Docker secrets based on branch
          run: |
            echo ${{ needs.setup.outputs.branch }}
            echo "DOCKER_USERNAME=${{ secrets.DEV_DOCKER_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_PASSWORD=${{ secrets.DEV_DOCKER_PASSWORD }}" >> $GITHUB_ENV
        
        - name: Set Docker secrets based on branch
          # if: ${{ needs.setup.outputs.branch }} == 'main' && ${{steps.check_commit_message.outputs.skip_build}} != 'true'
          if: needs.setup.outputs.branch == 'main' && steps.check_commit_message.outputs.skip_build != 'true'
          run: |
            echo ${{ needs.setup.outputs.branch }}
            echo "DOCKER_USERNAME=${{ secrets.MAIN_DOCKER_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_PASSWORD=${{ secrets.MAIN_DOCKER_PASSWORD }}" >> $GITHUB_ENV
  
        - name: Login to Docker Hub
          if: steps.check_commit_message.outputs.skip_build != 'true'
          uses: docker/login-action@v2
          with:
            username: ${{ env.DOCKER_USERNAME }}
            password: ${{ env.DOCKER_PASSWORD }}
        - name: Build and push Docker image
          if: steps.check_commit_message.outputs.skip_build != 'true'
          run: |
            branch="${{ matrix.service }}-${{ matrix.branch }}"
            lastBuildTime=$(git log -1 --format=%at origin/time 2>/dev/null || echo 0)
            lastUpdateTime=$(git log -1 --format=%at origin/$branch 2>/dev/null || echo 0)
            docker build -t ${{ matrix.image }} .
            docker push ${{ matrix.image }}
        - name: Delete after Docker push
          run: |
            curl -L \
            -X DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.REPO_ACCESS_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/git/refs/heads/${{ matrix.service }}-${{ matrix.branch }}

## After triggering updates, 
## 
    # updates:
    #   needs: 
    #     - loop
    #   runs-on: ubuntu-latest
    #   timeout-minutes: 90
    #   permissions:
    #     contents: 'read'
    #     id-token: 'write'
    #   steps:
    #     - name: Login to Google Cloud
    #       id: auth
    #       uses: google-github-actions/auth@v1
    #       with:
    #         token_format: access_token
    #         workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_ID }}
    #         service_account: ${{ secrets.SERVICE_ACCOUNT }}
    #     - name: Set up Cloud SDK
    #       uses: google-github-actions/setup-gcloud@v0.3.0
  
    #     - name: set credential_file
    #       run: gcloud auth login --cred-file=${{steps.auth.outputs.credentials_file_path}}
        
    #     # - name: List vms
    #     #   id: list-instances
    #     #   run: |
    #     #     gcloud compute instances list --format="value(name)" > instances.txt

    #     - name: SSH and Update File
    #       run: | # the while loop does not await
    #         # while read -r instance zone; do
    #         #   echo "Instance: $instance, Zone: $zone"
    #         #   sleep 10 # wait for first process to generate ssh key
    #         #   gcloud compute ssh $instance --zone=$zone --command "echo \$(date) | sudo tee /root/update" &
    #         # done <<< "$(gcloud compute instances list --format="value(name,zone)")"
    #         # wait 

    #         while read -r instance zone; do
    #           echo "Instance: $instance, Zone: $zone"
    #           echo "gcloud compute ssh $instance --zone=$zone --command \"echo \$(date) | sudo tee /root/update\" " >> tmp.sh
    #         done <<< "$(gcloud compute instances list --format="value(name,zone)")"

    #         /bin/bash tmp.sh
    
            
            
            

   
  